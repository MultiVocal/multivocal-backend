#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config();

var app = require('../app');
var debug = require('debug')('multivocal-backend:server');
var http = require('http');
var keystone = require('keystone');
var handlebars = require('express-handlebars');

/**
 * Get port from environment and store in Express.
 */

var p = (process.env.NODE_ENV === 'development' ? '3001' : '81')
var port = normalizePort(process.env.PORT || p);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Keystone initialization
 */

 keystone.init({
 	'name': 'Multivocal',
 	'brand': 'Multivocal',

 	'sass': '../public',
 	'static': '../public',
 	'favicon': '../public/favicon.ico',
 	'views': '../templates/views',
 	'view engine': '.hbs',

 	'custom engine': handlebars.create({
 		layoutsDir: '../templates/views/layouts',
 		partialsDir: '../templates/views/partials',
 		defaultLayout: 'default',
 		helpers: new require('../templates/views/helpers')(),
 		extname: '.hbs',
 	}).engine,

 	'auto update': true,
 	'session': true,
 	'auth': true,
 	'user model': 'User',
 });

 // Load your project's Models
keystone.import('../models');

// Setup common locals for your templates. The following are required for the
// bundled templates and layouts. Any runtime locals (that should be set uniquely
// for each request) should be added to ./routes/middleware.js
keystone.set('locals', {
	_: require('lodash'),
	env: keystone.get('env'),
	utils: keystone.utils,
	editable: keystone.content.editable,
});

keystone.set('auto update', false)

// Load your project's Routes
keystone.set('routes', require('../routes'));


// Configure the navigation bar in Keystone's Admin UI
keystone.set('nav', {
	posts: ['posts', 'post-categories'],
	users: 'users',
});

// Start Keystone to connect to your database and initialise the web server



keystone.start();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
